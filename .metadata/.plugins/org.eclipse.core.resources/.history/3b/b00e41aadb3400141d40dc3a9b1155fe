package gitter;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class GetRooms {
	public static void getRooms() throws IOException, InterruptedException
	{
		System.out.print("a");
	}

	/**
	 * 外部コマンドを引数指定実行
	 * 戻り値:標準出力、エラー出力 、リターンコード
	 * @see execCommand(String cmd, String cmds)
	 * @param cmds 実行するコマンドと引数を含む配列
	 * @return コマンド実行結果情報を保持するString配列
	 *    配列[0] ⇒ 標準出力
	 *    配列[1] ⇒ エラー出力
	 *    配列[2] ⇒ リターンコード
	 * @throws IOException 入出力エラーが発生した場合
	 */
	public static String[] execCommand(String[] cmds) throws IOException,InterruptedException
	{
	    String[] returns = new String[3];
	    String LINE_SEPA = System.getProperty("line.separator");
	    Runtime r = Runtime.getRuntime();
	    Process p = r.exec(cmds);
	    InputStream in = null;
	    BufferedReader br = null;
	    try {
	        in = p.getInputStream();
	        StringBuffer out = new StringBuffer();
	        br = new BufferedReader(new InputStreamReader(in));
	        String line;
	        while ((line = br.readLine()) != null) {
	            out.append(line + LINE_SEPA);
	        }
	        returns[0] = out.toString();
	        br.close();
	        in.close();
	        in = p.getErrorStream();
	        StringBuffer err = new StringBuffer();
	        br = new BufferedReader(new InputStreamReader(in));
	        while ((line = br.readLine()) != null) {
	            err.append(line + LINE_SEPA);
	        }
	        returns[1] = err.toString();
	        returns[2] = Integer.toString(p.waitFor());
	        return returns;
	    } finally {
	        if (br != null) {
	            br.close();
	        }
	        if (in != null) {
	            in.close();
	        }
	    }
	}
}
