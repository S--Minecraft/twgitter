package twgitter.slack;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import twgitter.croudia.CroudiaStream;
import twgitter.get.GetHTTP;
import twgitter.slack.config.Config;

public class GetChannelHistory {
	public static List<String> getChannelHistory(String channelName,String lastest,String oldest,int count) throws Exception{
		String channelId = GetChannels.roomNameToId(channelName);

		String URI = "https://slack.com/api/channels.history?token=" + Config.token + "&channel=" + channelId + "&lastest=" + lastest + "&oldest=" + oldest + "&count=" + count;
		List<String> json = GetHTTP.AccessHTTPString(URI);

		return json;
	}

	public static List<String> getChannelHistory(String channelName) throws Exception{
		String channelId = GetChannels.roomNameToId(channelName);

		String URI = "https://slack.com/api/channels.history?token=" + Config.token + "&channel=" + channelId;
		List<String> json = GetHTTP.AccessHTTPString(URI);

		return json;
	}

	public static List<Message> jsonToMessage(String json) {
		Gson gson = new Gson();

		char[] jsonChar = json.toCharArray();

		List<Message> messages = new ArrayList<>();

		if(jsonChar[0] == '[')
		{
			Type collectionType = new TypeToken<Collection<HistoryFirst>>(){}.getType();
			List<HistoryFirst> HistoryFirst = gson.fromJson(json.toString(),collectionType);

			for(int i=0;i<HistoryFirst.size();i++)
			{
				messages.addAll(HistoryFirst.get(i).getMessages());
			}

		}else if(jsonChar[0] == '{'){
			HistoryFirst HistoryFirst = gson.fromJson(json.toString(),HistoryFirst.class);

			messages = HistoryFirst.getMessages();

		}else{
			System.out.println("[Slack]Undefind json shape...");
			messages = null;
		}

		return messages;
	}
}
